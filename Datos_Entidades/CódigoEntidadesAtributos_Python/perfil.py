# -*- coding: utf-8 -*-
"""Perfil.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I3kz8YPCiZxSKvds7DNupMaqqG3gvBOd

**Proyecto Final: Unidad 1**

**Entidad: Perfil**
"""

#Faker es un paquete de Python que genera datos falsos.
!pip install Faker

#Librerías necesarias para la generación de datos.
import pandas as pd
import uuid
import random
from faker import Faker
import datetime

#Librerías necesarias para el detalle o la descripción.
import string
import random
from random import seed
from datetime import datetime

#Variable asignada para el tamaño del conjunto de datos. 
num_iess = 10000

#Lista de 3 características (Atributos)
features = [
    "id_perfil",
    "descripcion_perfil",
    "nombre_perfil",
]# Creando un DF para estas características
df = pd.DataFrame(columns=features)

"""**id_perfil**"""

#Biblioteca uuid para generar cadena aleatoria de datos para id_perfil.
df['id_perfil'] = [uuid.uuid4().hex for i in range(num_iess)]

#Genera identificaciones únicas para cada usuario. Si todas las ID en el conjunto de datos son únicas, devuelve True.
print(df['id_perfil'].nunique()==num_iess)

"""**descripcion_perfil**"""

#Variale para la descripción de tipo string junto con su longitud de cadena de caracteres
bio=[]
length_of_string = 25
#Crea la descripción del perfil.
for i in range(0, num_iess):
  random.seed(datetime.now())
  #La descripcion contendra todo tipo de caracteres.
  bio=(''.join(random.SystemRandom().choice(string.ascii_letters + string.digits) for i in range(length_of_string)))
  #Se guarda la descripcion en el atributo descripcionpermiso
  df.descripcion_perfil[i] =bio

"""**nombre_perfil**"""

#Los diferentes nombres de roles.
nombre_perfil = ['Usuario', 'Administrador']
#Creacion de los permisos para cada una de las filas
df['nombre_perfil'] = random.choices(
  nombre_perfil, 
    weights=(25,25), 
    k=num_iess
)

#Visualizar en la tabla los datos generados antes de descargar el excel.
df.head(5)

#Generar excel de los datos.
df.to_csv('perfil.csv')